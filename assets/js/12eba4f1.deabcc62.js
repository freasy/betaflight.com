"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3444],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=n.createContext({}),d=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=d(e.components);return n.createElement(u.Provider,{value:t},e.children)},p="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,l=e.originalType,u=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),p=d(r),f=o,m=p["".concat(u,".").concat(f)]||p[f]||s[f]||l;return r?n.createElement(m,i(i({ref:t},c),{},{components:r})):n.createElement(m,i({ref:t},c))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=r.length,i=new Array(l);i[0]=f;var a={};for(var u in t)hasOwnProperty.call(t,u)&&(a[u]=t[u]);a.originalType=e,a[p]="string"==typeof e?e:o,i[1]=a;for(var d=2;d<l;d++)i[d]=r[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},11510:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>a,toc:()=>d});var n=r(87462),o=(r(67294),r(3905));const l={},i="Betaflight 4.4 Cloud Build API",a={unversionedId:"development/API/Cloud-Build-API",id:"development/API/Cloud-Build-API",title:"Betaflight 4.4 Cloud Build API",description:"API",source:"@site/docs/development/API/Cloud-Build-API.mdx",sourceDirName:"development/API",slug:"/development/API/Cloud-Build-API",permalink:"/docs/development/API/Cloud-Build-API",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"development",previous:{title:"Bus and External Device Drivers",permalink:"/docs/development/API/BusDrivers"},next:{title:"DisplayPort MSP Extensions",permalink:"/docs/development/API/DisplayPort"}},u={},d=[{value:"API",id:"api",level:2},{value:"Usage",id:"usage",level:2},{value:"Radio Protocols",id:"radio-protocols",level:3},{value:"Telemetry Protocols",id:"telemetry-protocols",level:3},{value:"Other Options",id:"other-options",level:3},{value:"Motor Protocols",id:"motor-protocols",level:3},{value:"Custom Defines",id:"custom-defines",level:3}],c={toc:d};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"betaflight-44-cloud-build-api"},"Betaflight 4.4 Cloud Build API"),(0,o.kt)("h2",{id:"api"},"API"),(0,o.kt)("p",null,"Avoiding EOL on 512K targets we have introduced a cloud build API saving around 25% of firmware flash usage."),(0,o.kt)("p",null,"Unified targets define hardware drivers to be included in the firmware as described in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/manufacturer/manufacturer-design-guidelines#42-definitions-for-unified-targets"},"Hardware specification")),(0,o.kt)("p",null,"The build log has information about the build in case of failure."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"For optimal use please select ONLY the appropiate hardware for the flight controller after selecting the right target (using auto-detect button).\nChoices below are further described in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/wiki/configurator/firmware-flasher-tab"},"wiki/Firmware Flasher page")),(0,o.kt)("h3",{id:"radio-protocols"},"Radio Protocols"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"CRSF\nEXPRESSLRS\nFPORT\nGHOST\nIBUS\nJETIEXBUS\nPPM\nSBUS\nSPECTRUM\nSRXL2\nSUMD\nSUMH\nXBUS\n")),(0,o.kt)("h3",{id:"telemetry-protocols"},"Telemetry Protocols"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"FRSKY_HUB\nGHOST\nHOTT\nIBUS_EXTENDED\nJETIEXBUS\nLTM\nMAVLINK\nSMARTPORT\nSRXL\n")),(0,o.kt)("p",null,"Note: telemetry for CRSF, ELRS, FPORT and GHST are included during the build."),(0,o.kt)("h3",{id:"other-options"},"Other Options"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"AKK (SA FIX)\nFLASH\nGPS\nLED\nLED64\nMAG\nOSD\nOSD (HD)\nPINIO\nVTX\n")),(0,o.kt)("h3",{id:"motor-protocols"},"Motor Protocols"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"BRUSHED\nDSHOT\nMULTISHOT\nONESHOT\nPROSHOT\nPWM\n")),(0,o.kt)("h3",{id:"custom-defines"},"Custom Defines"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"ACRO_TRAINER\nBATTERY_CONTINUE\nDASHBOARD\nEMFAT_AUTORUN\nEMFAT_ICON\nESCSERIAL_SIMONK\nGPS\nGPS_PLUS_CODES\nLED_STRIP\nSERIAL_4WAY_SK_BOOTLOADER\n")))}p.isMDXComponent=!0}}]);