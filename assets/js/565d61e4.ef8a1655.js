"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8074],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(n),h=r,g=m["".concat(c,".").concat(h)]||m[h]||p[h]||a;return n?o.createElement(g,i(i({ref:t},u),{},{components:n})):o.createElement(g,i({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=h;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[m]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},13327:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var o=n(87462),r=(n(67294),n(3905));const a={},i="Contributing to Betaflight",l={unversionedId:"development/Betaflight-Contribution",id:"development/Betaflight-Contribution",title:"Contributing to Betaflight",description:"Contributing to Betaflight involves preparing your development environment and making a fork of the repository and working with Git.",source:"@site/docs/development/Betaflight-Contribution.md",sourceDirName:"development",slug:"/development/Betaflight-Contribution",permalink:"/docs/development/Betaflight-Contribution",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"development",previous:{title:"Battery Monitoring",permalink:"/docs/development/Battery"},next:{title:"Blackbox logging internals",permalink:"/docs/development/Blackbox Internals"}},c={},s=[{value:"Clone your fork to your development machine.",id:"clone-your-fork-to-your-development-machine",level:2},{value:"Global configuration",id:"global-configuration",level:2},{value:"Setup remotes",id:"setup-remotes",level:2},{value:"Create a branch and start making changes",id:"create-a-branch-and-start-making-changes",level:2},{value:"Stage files for commit",id:"stage-files-for-commit",level:2},{value:"Make more changes and commit on top of last commit",id:"make-more-changes-and-commit-on-top-of-last-commit",level:2},{value:"Update master branch with upstream updates and update your fork",id:"update-master-branch-with-upstream-updates-and-update-your-fork",level:2},{value:"Update your local branch with upstream changes",id:"update-your-local-branch-with-upstream-changes",level:2},{value:"Unstage file from working area",id:"unstage-file-from-working-area",level:2},{value:"Recover from unwanted commit without push",id:"recover-from-unwanted-commit-without-push",level:2},{value:"If you want to completely remove the unstaged changes run",id:"if-you-want-to-completely-remove-the-unstaged-changes-run",level:2},{value:"Unwanted commits in your latest push.",id:"unwanted-commits-in-your-latest-push",level:2},{value:"See general changes",id:"see-general-changes",level:2},{value:"See changes in particular file",id:"see-changes-in-particular-file",level:2},{value:"Checkout work on another machine",id:"checkout-work-on-another-machine",level:2},{value:"Quickly testing a PR",id:"quickly-testing-a-pr",level:2},{value:"Squash your commits",id:"squash-your-commits",level:2},{value:"Commit to a PR from another contributor",id:"commit-to-a-pr-from-another-contributor",level:2},{value:"How to sign your commits with PGP",id:"how-to-sign-your-commits-with-pgp",level:2},{value:"Bisection",id:"bisection",level:2},{value:"Links",id:"links",level:2}],u={toc:s};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"contributing-to-betaflight"},"Contributing to Betaflight"),(0,r.kt)("p",null,"Contributing to Betaflight involves preparing your development environment and making a fork of the repository and working with Git.\nLook in ",(0,r.kt)("a",{parentName:"p",href:"https://betaflight.com/docs/development/development"},"https://betaflight.com/docs/development/development")," for installation notes for your environment.\nThis document gives some instructions how to handle Git. First make a fork of the repository you want to work on from the github website.\nPlease contribute to this article to help others make git easier to use."),(0,r.kt)("h2",{id:"clone-your-fork-to-your-development-machine"},"Clone your fork to your development machine."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git clone https://github.com/yourname/betaflight.git\n")),(0,r.kt)("h2",{id:"global-configuration"},"Global configuration"),(0,r.kt)("p",null,"Please configure this to have the correct author in your commits"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'git config --global user.name "Your Name"\ngit config --global user.email "your@email.domain"\n')),(0,r.kt)("p",null,"If you omit to configure this you get a warning and have to use the following commands to rectify:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git config --global --edit\ngit commit --amend --reset-author\n")),(0,r.kt)("h2",{id:"setup-remotes"},"Setup remotes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git remote add upstream https://github.com/betaflight/betaflight.git\ngit remote -v\n")),(0,r.kt)("h2",{id:"create-a-branch-and-start-making-changes"},"Create a branch and start making changes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git checkout -b branch\n")),(0,r.kt)("h2",{id:"stage-files-for-commit"},"Stage files for commit"),(0,r.kt)("p",null,"Commit your changes after making initial changes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'git add .\ngit commit -m "message"\ngit push origin branch\n')),(0,r.kt)("p",null,"Note: ",(0,r.kt)("inlineCode",{parentName:"p"},"git commit -am")," or specify the files."),(0,r.kt)("h2",{id:"make-more-changes-and-commit-on-top-of-last-commit"},"Make more changes and commit on top of last commit"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git commit --amend\ngit push origin +branch\n")),(0,r.kt)("h2",{id:"update-master-branch-with-upstream-updates-and-update-your-fork"},"Update master branch with upstream updates and update your fork"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git checkout master\ngit pull --rebase upstream master\ngit push origin +master\n")),(0,r.kt)("h2",{id:"update-your-local-branch-with-upstream-changes"},"Update your local branch with upstream changes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git checkout branch\ngit branch --set-upstream-to=upstream/master branch\ngit pull --rebase\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git pull upstream master\ngit rebase -i master\n")),(0,r.kt)("p",null,"If you look at ",(0,r.kt)("inlineCode",{parentName:"p"},"git reflog --oneline")," you will see these lines:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"shacode HEAD@{0}: rebase (finish): returning to refs/head/branch\nshacode HEAD@{1}: rebase (pick): your branch commit description\nshacode (upstream/master, origin/master, origin/HEAD, master) HEAD@{2}: rebase (start): checkout longsha\n")),(0,r.kt)("h2",{id:"unstage-file-from-working-area"},"Unstage file from working area"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git restore --staged <file> to unstage a file from working area.\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git checkout --<filename>\n")),(0,r.kt)("h2",{id:"recover-from-unwanted-commit-without-push"},"Recover from unwanted commit without push"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git reset HEAD^\n")),(0,r.kt)("h2",{id:"if-you-want-to-completely-remove-the-unstaged-changes-run"},"If you want to completely remove the unstaged changes run"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git reset --hard HEAD\n")),(0,r.kt)("h2",{id:"unwanted-commits-in-your-latest-push"},"Unwanted commits in your latest push."),(0,r.kt)("p",null,"First try:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git rebase -i origin/branch~2 branch\ngit push origin +branch\n")),(0,r.kt)("p",null,"If this fails, backup your changed files (maybe also could use git stash)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git reset HEAD~ --hard\ngit checkout branch\n")),(0,r.kt)("p",null,"And restore your saved files (or use git stash pop)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'git add .\ngit commit -m "Make new commit"\ngit push origin +branch\n')),(0,r.kt)("h2",{id:"see-general-changes"},"See general changes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git diff\n")),(0,r.kt)("h2",{id:"see-changes-in-particular-file"},"See changes in particular file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git log -- src/main/cms/cms` .c\n")),(0,r.kt)("h2",{id:"checkout-work-on-another-machine"},"Checkout work on another machine"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git checkout origin/branch\ngit switch -c branch\n")),(0,r.kt)("h2",{id:"quickly-testing-a-pr"},"Quickly testing a PR"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git fetch upstream pull/2500/head:2500\ngit checkout 2500\n")),(0,r.kt)("h2",{id:"squash-your-commits"},"Squash your commits"),(0,r.kt)("p",null,"From the project folder you can use somethink like: ",(0,r.kt)("a",{parentName:"p",href:"https://www.scraggo.com/how-to-squash-commits"},"https://www.scraggo.com/how-to-squash-commits"),".\nNote the number of commits in your PR."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git rebase -i HEAD~17\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You should see a list of commits, each commit starting with the word \u201cpick\u201d."),(0,r.kt)("li",{parentName:"ul"},"Make sure the topmost, first commit says \u201cpick\u201d and change the rest below from \u201cpick\u201d to \u201csquash\u201d. This will squash each commit into the previous commit, which will continue until every commit is squashed into the first commit."),(0,r.kt)("li",{parentName:"ul"},"Save and close the editor."),(0,r.kt)("li",{parentName:"ul"},"It will give you the opportunity to change the commit message. What you see is a single message containing all of the commit messages. Edit these as you wish."),(0,r.kt)("li",{parentName:"ul"},"Save and close the editor again."),(0,r.kt)("li",{parentName:"ul"},"Important: If you\u2019ve already pushed commits to origin, and then squash them locally, you will have to force the push to your branch.")),(0,r.kt)("p",null,"Finally update with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git push origin +branch\n")),(0,r.kt)("h2",{id:"commit-to-a-pr-from-another-contributor"},"Commit to a PR from another contributor"),(0,r.kt)("p",null,"Sometimes you want to make changes to an existing PR.\nBefore doing so please ask permission from the contributor.\nIn the example please substitute the contributor, betaflight_project and branch:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git remote add contributor https://github.com/contributor/betaflight_project.git\ngit remote -v\ngit fetch contributor\ngit switch branch\n")),(0,r.kt)("p",null,"The original author now can pull the changes to the local branch with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git fetch origin branch:branch --update-head-ok\n")),(0,r.kt)("p",null,"Now you can make more changes and commit again. (This should just work with git pull - have to check this)"),(0,r.kt)("h1",{id:"advanced"},"Advanced"),(0,r.kt)("h2",{id:"how-to-sign-your-commits-with-pgp"},"How to sign your commits with PGP"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"https://docs.github.com/en/github/authenticating-to-github/managing-commit-signature-verification/generating-a-new-gpg-key"},"https://docs.github.com/en/github/authenticating-to-github/managing-commit-signature-verification/generating-a-new-gpg-key")),(0,r.kt)("p",null,"When using commit just add the -S flag to verify the commit and enter the passphrase you have chosen before."),(0,r.kt)("h2",{id:"bisection"},"Bisection"),(0,r.kt)("p",null,"Do bisection:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git bisect reset\ngit bisect start\ngit checkout 4.1.1\n")),(0,r.kt)("p",null,"Build and make sure it works"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git bisect good\ngit checkout 4.1.2\n")),(0,r.kt)("p",null,"Build and make sure it fails"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git bisect bad\n")),(0,r.kt)("p",null,"Then git will automatically bisects commits between the two versions, checks out a new bisecting commit.\nYou will build and test it, and tell git if the commit was good or bad."),(0,r.kt)("h2",{id:"links"},"Links"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://devconnected.com/how-to-remove-files-from-git-commit/"},"https://devconnected.com/how-to-remove-files-from-git-commit/")))}m.isMDXComponent=!0}}]);